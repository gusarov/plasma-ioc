<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Plasma Mobile</name>
    </assembly>
    <members>
        <member name="T:Plasma.TypedLazyWrapper">
            <summary>
            Convert Lazy&lt;object&gt; to &lt;T&gt; with T provided as Type
            </summary>
        </member>
        <member name="T:Plasma.RegisterServiceAttribute">
            <summary>
            Mark classes for automatic registration
            </summary>
        </member>
        <member name="T:Plasma.PlasmaContainer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Plasma.IPlasmaContainer">
            <summary>
            Plasma Service Container
            </summary>
        </member>
        <member name="T:Plasma.IPlasmaProvider">
            <summary>
            Plasm Service Provider
            </summary>
        </member>
        <member name="M:Plasma.PlasmaContainer.TryGetLazyCore(System.Type)">
            <summary>
            Get from current container or from parent chain
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Plasma.PlasmaContainer.IsValidImplementationType(System.Type)">
            <summary>
            reference type and not string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Plasma.PlasmaContainer.ServiceEntry.InstanceCache">
            <summary>
            Service instance or null if not instantiated yet
            </summary>
        </member>
        <member name="M:Plasma.Mining.Default(System.Type)">
            <summary>
            Return default instance (null or empty structure)
            </summary>
        </member>
        <member name="M:Plasma.Mining.DefaultFactory(System.Type)">
            <summary>
            How instantiate specified type
            </summary>
        </member>
        <member name="T:Plasma.Aop.CacheAdvise">
            <summary>
            Base class for attributive pointcuts for aspects
            </summary>
        </member>
        <member name="T:Plasma.Aop.IMethodIntercepAdvise">
            <summary>
            Advisor for method invokation
            </summary>
        </member>
        <member name="T:Plasma.Aop.IAdvise">
            <summary>
            Interface for aspect advisors
            </summary>
        </member>
        <member name="M:Plasma.Aop.IMethodIntercepAdvise.Invoke(System.Func{System.Object[],System.Object},System.Object[])">
            <summary>
            Extension point for invokation
            </summary>
        </member>
        <member name="T:DefaultImplAttribute">
            <summary>
            Suggest this implementation type or assembly qualified type name.
            </summary>
        </member>
        <member name="T:InjectAttribute">
            <summary>
            Allow property injection here. Automatic property injection is not safe, consider explicit specification
            </summary>
        </member>
        <member name="M:PlasmaContainerExt.Get``1(Plasma.IPlasmaProvider)">
            <summary>
            Get a service of registered type. On failure: throw exception.
            </summary>
            <exception cref="T:Plasma.PlasmaException">Service is not registered</exception>
        </member>
        <member name="M:PlasmaContainerExt.TryGet``1(Plasma.IPlasmaProvider)">
            <summary>
            Try get service of registered type and return null on failure
            </summary>
        </member>
        <member name="M:PlasmaContainerExt.Get``1(Plasma.IPlasmaContainer,System.Func{``0})">
            <summary>
            Try get service of registered type or register by factory
            </summary>
        </member>
        <member name="M:PlasmaContainerExt.Add``1(Plasma.IPlasmaContainer)">
            <summary>
            Register service with default lazy factory
            </summary>
            <typeparam name="T">Registering type, e.g. MyServiceImpl</typeparam>
            <param name="container"></param>
        </member>
        <member name="M:PlasmaContainerExt.Add``1(Plasma.IPlasmaContainer,``0)">
            <summary>
            Register service
            </summary>
            <typeparam name="T">Registering type, e.g. IMyService</typeparam>
            <param name="container"></param>
            <param name="instance">Service instance</param>
        </member>
        <member name="M:PlasmaContainerExt.Add``1(Plasma.IPlasmaContainer,System.Func{``0})">
            <summary>
            Register service factory
            </summary>
            <typeparam name="T">Registering type, e.g. IMyService</typeparam>
            <param name="container"></param>
            <param name="instanceFactory">Service factory</param>
        </member>
        <member name="M:PlasmaContainerExt.Add``1(Plasma.IPlasmaContainer,MyUtils.Lazy{``0})">
            <summary>
            Register service lazy
            </summary>
            <typeparam name="T">Registering type, e.g. IMyService</typeparam>
            <param name="container"></param>
            <param name="instanceFactory">Service lazy instance</param>
        </member>
        <member name="M:PlasmaContainerExt.Add``2(Plasma.IPlasmaContainer,MyUtils.Lazy{``1})">
            <summary>
            Register service lazy
            </summary>
            <typeparam name="T">Registering type, e.g. IMyService</typeparam>
            <typeparam name="TImpl">Service implementation, e.g. MyServiceImpl</typeparam>
            <param name="container"></param>
            <param name="instanceFactory">Service lazy instance</param>
        </member>
        <member name="M:PlasmaContainerExt.Add``2(Plasma.IPlasmaContainer)">
            <summary>
            Register service with default factory
            </summary>
            <typeparam name="T">Registering type, e.g. IMyService</typeparam>
            <typeparam name="TImpl">Service implementation, e.g. MyServiceImpl</typeparam>
            <param name="container"></param>
        </member>
        <member name="T:Plasma.PlasmaException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Plasma.Internal.TypeAutoPlumberRegister">
            <summary>
            Register of plumbing code - property injectors
            </summary>
        </member>
        <member name="M:Plasma.Internal.TypeAutoPlumberRegister.Register``1(System.Action{Plasma.IPlasmaContainer,``0})">
            <summary>
            Add an action for property injection
            </summary>
        </member>
        <member name="M:Plasma.Internal.TypeAutoPlumberRegister.Register``1(System.Action{Plasma.IPlasmaContainer,System.Object})">
            <summary>
            Add an action for property injection
            </summary>
        </member>
        <member name="M:Plasma.Internal.TypeAutoPlumberRegister.RegisterNone``1">
            <summary>
            Express the fact that no property injection exists for this type
            </summary>
        </member>
        <member name="M:Plasma.Internal.TypeAutoPlumberRegister.TryPlumb(System.Object,Plasma.IPlasmaContainer)">
            <summary>
            Inject dependencies from container
            </summary>
        </member>
        <member name="T:Plasma.DefaultConstructorAttribute">
            <summary>
            Suggest this constructor for automatic registration or instantiating
            </summary>
        </member>
        <member name="T:Plasma.Aop.CacheAttribute">
            <summary>
            Aspect for caching method calculations
            </summary>
        </member>
        <member name="T:Plasma.Aop.AspectAttribute">
            <summary>
            Specify aspect advisor
            </summary>
        </member>
        <member name="M:Plasma.Aop.AspectAttribute.#ctor(System.Type)">
            <summary>
            Specify aspect advisor
            </summary>
        </member>
        <member name="P:Plasma.Aop.AspectAttribute.Advise">
            <summary>
            Advisor implementatino type
            </summary>
        </member>
        <member name="M:Plasma.Aop.CacheAttribute.#ctor">
            <summary>
            Aspect for caching method calculations
            </summary>
        </member>
        <member name="T:Plasma.Internal.PlasmaConfigSection">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
