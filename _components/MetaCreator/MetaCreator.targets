<Project DefaultTarget='Disclamer' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>

	<Target Name='Disclamer'>
		<Error Text='* MetaCreator.targets: You can not run MetaCreator.targets dirrectly. Please, include it into your project. MetaCreator injects to the building chain.' />
	</Target>

	<PropertyGroup>
		<MetaCreatorVersion>1.6</MetaCreatorVersion>
		<UseHostCompilerIfAvailable>False</UseHostCompilerIfAvailable>
	</PropertyGroup>

	<!-- Determine and try to fix double import -->
	<PropertyGroup>
		<MCImportedTwice Condition="'$(MCImported)'=='True'">True</MCImportedTwice>
		<MCImported>True</MCImported>
		<ItemsGroup Condition="'$(MCImportedTwice)'=='True'">
			<Error Text="* MetaCreator.targets: Metacreator is imported twice! (Probably it is installed in the system and included into project file at the same time)" />
			<!-- 
			set flag and use it as a condition before injectors
			<BuildDependsOn Remove="ShadowCopyWrapper;ExecuteMetaCreator" />
			<CleanDependsOn Remove="CleanGeneratedFiles" />
			-->
		</ItemsGroup>
	</PropertyGroup>
	
	<!-- Determine dev mode -->
	<PropertyGroup Condition="Exists('MetaCreator.sln')">
		<DevMode>True</DevMode>
	</PropertyGroup>
	<PropertyGroup Condition="Exists('..\MetaCreator.sln')">
		<DevMode>True</DevMode>
	</PropertyGroup>
	<PropertyGroup Condition="Exists('..\..\MetaCreator.sln')">
		<DevMode>True</DevMode>
	</PropertyGroup>
	<PropertyGroup Condition='$(DevMode)!=True'>
		<DevMode>False</DevMode>
	</PropertyGroup>
	
	<Choose>
		<When Condition='$(DevMode)'>
			<PropertyGroup>
				<MC_Steps>
					ShadowCopyWrapper;
					GetMetaCreatorRealFullPath; <!-- Full path to MC are passed as input to wrapper task. It allows to detect changes in MetaCreator.dll during dev mode -->
					ExecuteMetaCreatorWrapper;
				</MC_Steps>
				<DevCommonBinPath>$(SolutionDir)Bin\$(ConfigurationName)\</DevCommonBinPath>
				<Wrapper>$(DevCommonBinPath)MSBuildWrapper.dll</Wrapper>
				<WrapperCopy>$(DevCommonBinPath)MSBuildWrapper.copy.dll</WrapperCopy>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<MC_Steps>
					ExecuteMetaCreator;
				</MC_Steps>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<PropertyGroup>
		<MC_Build>Started</MC_Build>
		<!--
			Started  	- initial value of state
			Requested	- defined in before_BuildDependsOn injection
			Performed	- defined in ExecuteMetacreator, after ResolveReferencesDependsOn, if Requested
			Done     	- defined in after_BuildDependsOn injection, check that requested build is performed and change state
		-->
		<CompileDependsOn>
			MC_BeforeCompile_Aspect;
			$(MC_Steps);
			$(CompileDependsOn);
			MC_AfterCompile_Aspect;
		</CompileDependsOn>
<!--
		<BuildDependsOn>
			MC_BeforeCompile_Aspect;
			$(CompileDependsOn);
			MC_AfterCompile_Aspect;
		</BuildDependsOn>
		<ResolveReferencesDependsOn>
			$(ResolveReferencesDependsOn);
			$(MC_Steps);
		</ResolveReferencesDependsOn>
-->
	</PropertyGroup>

	<!-- Import custom targets -->
	<Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\..\..\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\..\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\..\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\..\MetaCreator.Custom.targets')"/>
	<Import Project="$(MSBuildProjectDirectory)\MetaCreator.Custom.targets" Condition="Exists('$(MSBuildProjectDirectory)\MetaCreator.Custom.targets')"/>

	<PropertyGroup Condition="'$(MetaCreatorDLL)'==''">
		<MetaCreatorDLL Condition="'$(MetaCreatorRealFullPath)'!=''" >$(MetaCreatorRealFullPath)</MetaCreatorDLL>
		<!-- <MetaCreatorDLL Condition="'$(MSBuildThisFileDirectory)'!=''">$(MSBuildThisFileDirectory)\MetaCreator.dll</MetaCreatorDLL>  Net4.0 -->
		<MetaCreatorDLL Condition="'$(MetaCreatorDLL)'==''">MetaCreator.dll</MetaCreatorDLL>
	</PropertyGroup>
	
	<Target Name='MC_BeforeCompile_Aspect'>
		<PropertyGroup>
			<MC_Build>Requested</MC_Build>
		</PropertyGroup>
	</Target>

	<Target Name='MC_AfterCompile_Aspect'>
		<Error Condition="'$(MC_Build)'!='Performed'" Text='* MetaCreator.targets: Assert: Build requested, but was not performed in building chain.' />
		<PropertyGroup>
			<MC_Build>Done</MC_Build>
		</PropertyGroup>
	</Target>
	
	<PropertyGroup>
		<CleanDependsOn>
			CleanGeneratedFiles;
			$(CleanDependsOn);
		</CleanDependsOn>
	</PropertyGroup>
	
	<UsingTask Condition='$(DevMode)' AssemblyFile='$(WrapperCopy)' TaskName='MSBuildWrapper' />
	<UsingTask Condition='!$(DevMode)' AssemblyFile='$(MetaCreatorDLL)' TaskName='MetaCreator.ExecuteMetaCreator' />
	
	<!--Target Name="msg" BeforeTargets="ExecuteMetaCreatorWrapper;ExecuteMetaCreator;ShadowCopyWrapper">
		<Message Text='* MetaCreator.targets: DevMode=$(DevMode)' Importance='high' />
		<Error Text="* MetaCreator.targets: Targets have been imported twice in the project" Condition="'$(MCImportedTwice)'=='True'"/>
	</Target-->
	
	<Target Name='GetMetaCreatorRealFullPath' Condition="'$(MetaCreatorRealFullPath)'=='' Or '$(MetaCreatorDLL)'=='' ">
		<Message Text='* MetaCreator.targets: Execute wrapper with GetMetaCreatorRealFullPath...' Importance='high'/>
		<MSBuildWrapper
			Task = 'MetaCreator.GetAssemblyPath, MetaCreator.dll'
			Bin = '$(DevCommonBinPath)'
			OutputParamNames = 'AssemblyFullPath; AssemblyDir'
		>
			<Output TaskParameter='OutputParam1' PropertyName='MetaCreatorRealFullPath' />
			<Output TaskParameter='OutputParam2' PropertyName='MetaCreatorRealDir' />
		</MSBuildWrapper>
		<PropertyGroup>
			<MetaCreatorDLL>$(MetaCreatorRealFullPath)</MetaCreatorDLL>
		</PropertyGroup>

	</Target>
	
	<Target Name='ExecuteMetaCreatorWrapper'
		Inputs='$(MetaCreatorDLL);
			@(Meta);
			@(None);
			$(MSBuildAllProjects);
			@(Compile);
			@(_CoreCompileResourceInputs);
			$(ApplicationIcon);
			$(AssemblyOriginatorKeyFile);
			@(ReferencePath);
			@(CompiledLicenseFile);
			@(EmbeddedDocumentation); 
			$(Win32Resource);
			$(Win32Manifest);
			@(CustomAdditionalCompileInputs)'
		Outputs='@(IntermediateAssembly)' >
		<Message Text='* MetaCreator.targets: Execute wrapper with MetaCreator...' Importance='high'/>
		<Error Condition="'$(MC_Build)'!='Requested'" Text='* MetaCreator.targets: Assert: Build requested, but was not performed in building chain.' />

		<MSBuildWrapper
			Task = 'MetaCreator.ExecuteMetaCreator, MetaCreator.dll'
			Bin = '$(DevCommonBinPath)'

			ArrayNames = 'Sources; References'
			Array1 = '@(Compile); @(None)'
			Array2 = '@(ReferencePath)'

			ParamNames = 'IsDevMode; IntermediateOutputPath; ProjDir; TargetFrameworkVersion; TargetsVersion'
			Param1 = 'True'
			Param2 = '$(IntermediateOutputPath)'
			Param3 = '$(ProjectDir)'
			Param4 = '$(TargetFrameworkVersion)'
			Param5 = '$(MetaCreatorVersion)'

			OutputArrayNames = 'AddFiles; RemoveFiles'
			>
			<Output TaskParameter='OutputArray1' ItemName='MCAddFiles' />
			<Output TaskParameter='OutputArray2' ItemName='MCRemoveFiles' />
		</MSBuildWrapper>
		<ItemGroup>
			<Compile Include='@(MCAddFiles)'/>
			<Compile Remove='@(MCRemoveFiles)'/>
		</ItemGroup>
		
		<PropertyGroup>
			<MC_Build>Performed</MC_Build>
		</PropertyGroup>

	</Target>
	
	<Target
		Name='ExecuteMetaCreator'
		Inputs='@(Meta);
			@(None);
			$(MSBuildAllProjects);
			@(Compile);
			@(_CoreCompileResourceInputs);
			$(ApplicationIcon);
			$(AssemblyOriginatorKeyFile);
			@(ReferencePath);
			@(CompiledLicenseFile);
			@(EmbeddedDocumentation); 
			$(Win32Resource);
			$(Win32Manifest);
			@(CustomAdditionalCompileInputs)'
		Outputs='@(IntermediateAssembly)' >
		<Message Text='* MetaCreator.targets: Execute MetaCreator (Targets v$(MetaCreatorVersion))...' Importance='high'/>
		<Error Condition="'$(MC_Build)'!='Requested'" Text='* MetaCreator.targets: Assert: Buld requested, but was not performed in building chain.' />
		<ExecuteMetaCreator
			Sources = '@(Compile); @(None)'
			References = '@(ReferencePath)'
			ProjDir = '$(ProjectDir)'
			IntermediateOutputPath = '$(IntermediateOutputPath)'
			TargetFrameworkVersion = '$(TargetFrameworkVersion)'
			TargetsVersion = '$(MetaCreatorVersion)'
			>
			<Output TaskParameter='AddFiles' ItemName='MCAddFiles' />
			<Output TaskParameter='RemoveFiles' ItemName='MCRemoveFiles' />
		</ExecuteMetaCreator>
		<ItemGroup>
			<Compile Include='@(MCAddFiles)'/>
			<Compile Remove='@(MCRemoveFiles)'/>
		</ItemGroup>
				
		<PropertyGroup>
			<MC_Build>Performed</MC_Build>
		</PropertyGroup>
	</Target>

	<Target
		Name='ShadowCopyWrapper'
		Inputs='$(Wrapper)'
		Outputs='$(WrapperCopy)'>
		
		<Message Text='* MetaCreator.targets: Shadow copy wrapper' Importance='high' />
		<Copy ContinueOnError='true' SourceFiles='$(Wrapper)' DestinationFiles='$(WrapperCopy)' />

		<PropertyGroup>
			<Wrapper>$(WrapperCopy)</Wrapper>
		</PropertyGroup>
	</Target>
	
	<Target Name='CleanGeneratedFiles'>
		<Message Text='* MetaCreator.targets: Clean' Importance='high'/>
		<CreateItem Include='$(IntermediateOutputPath)**\*.g.cs'>
			<Output TaskParameter='Include' ItemName='GeneratedFiles'/>
		</CreateItem>

		<!-- ANOTHER WAY v3.5
		<ItemGroup>
			<GeneratedFiles Include='$(IntermediateOutputPath)**\*.g.cs'/>
		</ItemGroup>
		-->
		<!--
		<Exec ContinueOnError='true' Command='attrib -r %(GeneratedFiles.Identity)' />
		-->
		<Delete ContinueOnError='true' Files='@(GeneratedFiles)'/>
	</Target>


</Project>

<!--
		<LightPersistModelGenerator
			Sources = '@(None)'
			IntermediateOutputPath = '$(IntermediateOutputPath)'
			ProjectDir = '$(ProjectDir)'
			>
			<Output TaskParameter='Include' ItemName='Compile' />
		</LightPersistModelGenerator>
-->
	<!--
	<UsingTask AssemblyFile='$(MetaCreatorDll)' TaskName='MetaCreator.ExecuteMetaCreator' />
	<Target Name='ExecuteMetaCreator'>
		<Message Text='* MetaCreator.targets: Execute...' Importance='high'/>
		<MetaCreator.ExecuteMetaCreator Sources='@(Compile)' IntermediateOutputPath='$(IntermediateOutputPath)' >
			<Output TaskParameter='AddFiles' ItemName='Compile' />
			<Output TaskParameter="AddFiles" ItemName="MCAddFiles" />
		
			<Output TaskParameter="RemoveFiles" ItemName="MCRemoveFiles" />
		</MetaCreator.ExecuteMetaCreator>
		<ItemGroup>
			<Compile Remove="@(MCRemoveFiles)"/>
		</ItemGroup>
	</Target>
-->
	
